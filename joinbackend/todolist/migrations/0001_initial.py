# Generated by Django 5.0.1 on 2024-03-18 20:41

import datetime
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=50)),
                ('color', models.CharField(default='', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subtask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checked', models.BooleanField(default=False)),
                ('title', models.CharField(default='Subtask', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(max_length=100, unique=True)),
                ('iconColor', models.CharField(default='#9327FF', max_length=30)),
                ('phone', models.CharField(default=' ', max_length=30, null=True)),
                ('username', models.CharField(default=' ', max_length=100)),
                ('short', models.CharField(default='u', max_length=30)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(default='User@mail', max_length=100)),
                ('iconColor', models.CharField(default='#9327FF', max_length=30)),
                ('phone', models.CharField(default=' ', max_length=30, null=True)),
                ('name', models.CharField(default='user', max_length=100)),
                ('short', models.CharField(default='u', max_length=30)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubtasksList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subtask', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='todolist.subtask')),
            ],
        ),
        migrations.CreateModel(
            name='TaskAssignments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TodoItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=100)),
                ('description', models.CharField(default='', max_length=1000)),
                ('date', models.DateField(default=datetime.date.today)),
                ('color', models.CharField(default='', max_length=30)),
                ('checked', models.BooleanField(default=False)),
                ('prio', models.CharField(default='', max_length=30)),
                ('state', models.CharField(default='', max_length=30)),
                ('assignments', models.ManyToManyField(through='todolist.TaskAssignments', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='todolist.category')),
                ('subtask', models.ManyToManyField(through='todolist.SubtasksList', to='todolist.subtask')),
            ],
        ),
        migrations.AddField(
            model_name='taskassignments',
            name='todoitem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='todolist.todoitem'),
        ),
        migrations.AddField(
            model_name='subtaskslist',
            name='todoitem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='todolist.todoitem'),
        ),
    ]
